#!/usr/bin/env python
# license removed for brevity
import rospy
import math
from sibot_msgs.msg import Servo_Array
from geometry_msgs.msg import Vector3

#Hipotenusa:
def hipo(x,y):
    return math.sqrt(x*x + y*y)
#Cosines law:
def lawOfCosines(a,b,c):
    rate = (a*a + b*b - c*c) / (2 * a * b)
    if abs(rate) > 1:
        if max(rate,0) == 0:
            rate = -1
        if max(rate,0) == rate:
            rate = 1
    return math.acos(rate)

def deg(rad):
    return rad * 180 / math.pi

#Arm parameters
#b = 5.0
#l1 = 4.0 #First link lenght
#L1 = b+l1
L2 = 150 # [cm], Second link lenght
L3 = 150 # [cm], Third link lenght

# global angles
angles = [90, 90, 90]#{'M1':90, 'M2':90,'M3':90}] default/starting position
pub = rospy.Publisher('servo_nolim', Servo_Array, queue_size=10)

def callback(data):
    print("entered IK callback")
    #Desired position,cartesian coordinates taken from Vector3 message
    cartP = {'xEE':data.x, 'yEE': data.y, 'zEE': data.z}
    # Desired position,cylindrical coordinates
    cylP = {'theta': math.atan2(cartP['yEE'], cartP['xEE']), 'r':hipo(cartP['xEE'], cartP['yEE']), 'zEE':cartP['zEE']}
    #z = cylP['zEE']-L1
    z = cylP['zEE']
    ro = hipo(cylP['r'], z)
    global angles
    M1 = cylP['theta']*2 + math.pi/2
    M2 = math.atan2(z,cylP['r'])+ lawOfCosines(ro,L2,L3)
    M3 = M2 + lawOfCosines(L2,L3,ro) - math.pi/2
    angles = [M1,math.pi - M2,M3]
    angles = [deg(angle) for angle in angles]
    #print(angles)
    pub.publish(angles)

def listener():
    rospy.init_node('pos2servo', anonymous=True)
    rospy.Subscriber("desP", Vector3, callback)
    #Start position
    #pub.publish([angles['M1'],angles['M2'],angles['M3']])
    #pub.publish(angles)
    rospy.spin()

if __name__ == '__main__':
    listener()
